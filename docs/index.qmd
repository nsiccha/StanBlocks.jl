{{< include _README.md >}}

# Overview of posteriors

The below table shows information about the implemented posteriors. 
The column `directly comparable` has value `yes` if the **median absolute deviation** of the reference (Stan) and unadjusted Julia implementation of the log density is less than `1e-4`. 
That quantity being different from zero usually implies that Stan has eliminated constant terms in the log density, saving some computational work. 
The column `usable` has value `yes` if the **median relative absolute deviation** of the reference (Stan) and constant-adjusted Julia implementation of the log density is less than `1e-8`.  

```{julia}
using DataFrames, StanBlocks, Markdown, PosteriorDB, StanLogDensityProblems, LogDensityProblems, Statistics, OrderedCollections, PrettyTables, Serialization  
using Logging, Test
include("julia/common.jl")
tests = map(posterior_names) do posterior_name
    cache_path = joinpath("cache", "$posterior_name.sjl")
    isfile(cache_path) && return Serialization.deserialize(cache_path)
    println("Checking $posterior_name")
    post = PosteriorDB.posterior(pdb, posterior_name)
    jlpdf = StanBlocks.julia_implementation(post)
    stan_path = PosteriorDB.path(PosteriorDB.implementation(PosteriorDB.model(post), "stan"))
    stan_problem = with_logger(ConsoleLogger(stderr, Logging.Error)) do 
        StanProblem(
            stan_path, 
            PosteriorDB.load(PosteriorDB.dataset(post), String);
            nan_on_error=true
        )
    end
    slpdf(x) = LogDensityProblems.logdensity(stan_problem, x)
    dimension = throws = dconstant = dremaining = missing
    usable = comparable = "no"

    n = LogDensityProblems.dimension(stan_problem)
    dimension = n
    m = 200 
    X = randn((n, m))
    jlpdfs = mapreduce((jlpdf), vcat, eachcol(X)) 
    slpdfs = mapreduce(slpdf, vcat, eachcol(X)) 
    finite_idxs = filter(i->isfinite(jlpdfs[i]+slpdfs[i]),1:m)
    throws = length(finite_idxs) == 0
    if !throws
        jlpdfs = jlpdfs[finite_idxs]
        slpdfs = slpdfs[finite_idxs]
        ajlpdfs = jlpdfs .+ median(slpdfs-jlpdfs) 
        dconstant = UncertainStatistic(median, abs.(jlpdfs-slpdfs))
        dremaining = UncertainStatistic(median, abs.((slpdfs .- ajlpdfs) ./ slpdfs)) 
        usable = if dremaining <= 1e-8  
            "yes"
        elseif dremaining <= 1e-4
            "maybe" 
        elseif dremaining <= 1e-2
            "maybe maybe?"
        else
            "no"
        end
        comparable = if dconstant <= 1e-4
            "yes"
        else
            "maybe?" 
        end
    else
        error(finite_idxs)
    end
    rv = (;dimension, throws, dconstant, dremaining, usable, comparable)
    Serialization.serialize(cache_path, rv)
    return rv
end
ternary(c, t, f) = c ? t : f
df = DataFrame(OrderedDict(
    "posterior name"=>posterior_names,
    "implementations"=>implementations_string.(posterior_names),
    "dimension"=>getproperty.(tests, :dimension),
    "usable"=>getproperty.(tests, :usable),
    # "inferred"=>ternary.(getproperty.(tests, :inferred), "yes", "no"),
    "directly comparable"=>getproperty.(tests, :comparable),
    "constant difference"=>getproperty.(tests, :dconstant),
    "remaining relative difference"=>getproperty.(tests, :dremaining),
))
sort!(df, :usable; rev=true)
pretty_table(DataFrame(
    "posteriors"=>size(df, 1), 
    "usable posteriors"=>sum(==("yes"), df.usable), 
    # "return type stable posteriors"=>sum(==("yes"), df.inferred), 
    "directly comparable posteriors"=>sum(==("yes"), df[!, "directly comparable"])
); backend=Val(:html), show_subheader=false) 
```
:::{.column-page}

```{julia}
pretty_table(df; backend=Val(:html), show_subheader=false, table_class="interactive")
```
:::